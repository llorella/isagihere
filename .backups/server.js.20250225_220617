import { serve } from 'bun';
import { fetch } from 'undici';

// Centralized lab configuration - easily extendable
const LABS = {
  openai: {
    name: 'OpenAI',
    color: '#10a37f', // OpenAI green
    fetchData: async () => {
      const response = await fetch('https://jobs.ashbyhq.com/api/non-user-graphql?op=ApiJobBoardWithTeams', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apollographql-client-name': 'frontend_non_user',
          'apollographql-client-version': '0.1.0',
        },
        body: JSON.stringify({
          operationName: 'ApiJobBoardWithTeams',
          variables: { organizationHostedJobsPageName: 'openai' },
          query: `
            query ApiJobBoardWithTeams($organizationHostedJobsPageName: String!) {
              jobBoard: jobBoardWithTeams(organizationHostedJobsPageName: $organizationHostedJobsPageName) {
                teams {
                  id
                  name
                  parentTeamId
                }
                jobPostings {
                  id
                  title
                  teamId
                  locationName
                  employmentType
                  compensationTierSummary
                }
              }
            }
          `,
        }),
      });
      const data = await response.json();
      return data;
    },
    transformData: (data) => {
      const teams = data.data.jobBoard.teams.reduce((acc, team) => {
        acc[team.id] = team.name;
        return acc;
      }, {});
      
      return data.data.jobBoard.jobPostings.map(job => ({
        id: job.id,
        title: job.title,
        team: teams[job.teamId] || 'Unknown Team',
        location: job.locationName || 'Remote',
        type: job.employmentType || 'Unknown',
        compensation: job.compensationTierSummary || 'Not specified',
        lab: 'openai'
      }));
    }
  },
  anthropic: {
    name: 'Anthropic',
    color: '#6b5ce7', // Anthropic purple
    fetchData: async () => {
      const response = await fetch('https://boards-api.greenhouse.io/v1/boards/anthropic/departments');
      return await response.json();
    },
    transformData: (data) => {
      return data.departments.flatMap(dept => 
        dept.jobs.map(job => ({
          id: job.id,
          title: job.title,
          team: dept.name,
          location: job.location?.name || 'Remote',
          type: 'FullTime', // Greenhouse doesn't always specify this
          compensation: 'Not specified', // Greenhouse doesn't provide this
          lab: 'anthropic'
        }))
      );
    }
  },
  // Add more labs here following the same pattern
};

serve({
  port: 3000,
  async fetch(req) {
    const url = new URL(req.url);

    // Serve static files
    if (url.pathname === '/') {
      return new Response(Bun.file('./index.html'));
    } else if (url.pathname === '/index.js') {
      return new Response(Bun.file('./index.js'));
    } else if (url.pathname === '/index.css') {
      return new Response(Bun.file('./index.css'));
    }

    // Get lab configuration for frontend
    if (url.pathname === '/api/labs') {
      const labConfig = Object.entries(LABS).map(([id, lab]) => ({
        id,
        name: lab.name,
        color: lab.color
      }));
      return new Response(JSON.stringify(labConfig), {
        headers: { 'Content-Type': 'application/json' },
      });
    }

    // API endpoint to fetch all job data
    if (url.pathname === '/api/jobs') {
      try {
        const allJobs = [];
        
        // Fetch data from all labs in parallel
        const results = await Promise.allSettled(
          Object.entries(LABS).map(async ([labId, lab]) => {
            const rawData = await lab.fetchData();
            const transformedData = lab.transformData(rawData);
            return transformedData;
          })
        );
        
        // Combine results
        results.forEach(result => {
          if (result.status === 'fulfilled') {
            allJobs.push(...result.value);
          }
        });
        
        return new Response(JSON.stringify(allJobs), {
          headers: { 'Content-Type': 'application/json' },
        });
      } catch (error) {
        console.error('Error fetching jobs:', error);
        return new Response(JSON.stringify({ error: 'Failed to fetch job data' }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' },
        });
      }
    }

    return new Response('Not found', { status: 404 });
  },
});

console.log('Server running at http://localhost:3000');